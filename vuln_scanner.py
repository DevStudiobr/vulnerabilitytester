import requests
from bs4 import BeautifulSoup

def sql_injection_test(url):
    payload = "' OR '1'='1"
    vulnerable = False
    try:
        response = requests.get(url + payload)
        if "mysql" in response.text.lower() or "syntax" in response.text.lower():
            vulnerable = True
            print(f"[!] SQL Injection Vulnerability Found: {url}")
        else:
            print(f"[-] No SQL Injection Vulnerability Found: {url}")
    except Exception as e:
        print(f"Error testing SQL Injection on {url}: {e}")
    return vulnerable

def xss_test(url, param):
    payload = "<script>alert('XSS')</script>"
    try:
        response = requests.get(url, params={param: payload})
        if payload in response.text:
            print(f"[!] XSS Vulnerability Found: {url}")
        else:
            print(f"[-] No XSS Vulnerability Found: {url}")
    except Exception as e:
        print(f"Error testing XSS on {url}: {e}")

def header_check(url):
    try:
        response = requests.head(url)
        headers = response.headers
        if 'X-Frame-Options' not in headers:
            print(f"[!] Missing X-Frame-Options header: {url}")
        if 'Content-Security-Policy' not in headers:
            print(f"[!] Missing Content-Security-Policy header: {url}")
        else:
            print(f"[-] Security Headers OK: {url}")
    except Exception as e:
        print(f"Error checking headers on {url}: {e}")

def main():
    print("Vulnerability Tester - Hacking Ético")
    url = input("Digite a URL do site alvo: ")

    print("\n[+] Testando SQL Injection...")
    sql_injection_test(url)

    print("\n[+] Testando XSS (Cross-Site Scripting)...")
    param = input("Digite o parâmetro GET para teste de XSS: ")
    xss_test(url, param)

    print("\n[+] Verificando Cabeçalhos de Segurança...")
    header_check(url)

if __name__ == "__main__":
    main()
